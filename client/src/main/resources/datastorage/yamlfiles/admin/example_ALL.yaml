openapi: 3.0.0
info:
  title: My Awesome API
  description: This API provides functionalities for...
  termsOfService: https://example.com/terms
  version: 1.0.0
  contact:
    name: John Doe
    email: john.doe@example.com
    url: https://example.com/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
externalDocs:
  url: https://example.com/docs
  description: Documentation for APIs
servers:
  - url: https://api.example.com
    description: Main server for production environment
tags:
  - name: crypto
    description: Crypto management
  - name: user
    description: User management
  - name: workstation
    description: Workstation management
paths:
  /crypto:
    post:
      tags:
        - crypto
      operationId: createCrypto
      description: Create a new Crypto
      summary: Create a new Crypto
      requestBody:
        required: true
        description: Create a new Crypto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crypto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crypto'
        '405':
          description: Invalid input
    put:
      tags:
        - crypto
      operationId: updateCrypto
      description: Update an existent Crypto by ID
      summary: Update an existent Crypto
      requestBody:
        required: true
        description: Update an existent Crypto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crypto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crypto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Crypto not found
        '405':
          description: Validation exception
  /crypto/{cryptoId}:
    get:
      tags:
        - crypto
      operationId: retrieveCrypto
      description: Retrieve an existent Crypto by ID
      summary: Retrieve a Crypto
      parameters:
        - name: cryptoId
          in: path
          description: Id of the Crypto to return
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crypto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Crypto not found
    delete:
      tags:
        - crypto
      operationId: deleteCrypto
      description: Delete an existent Crypto by ID
      summary: Delete a Crypto
      parameters:
        - name: cryptoId
          in: path
          description: Id of the Crypto to delete
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  /crypto/transfer:
    post:
      tags:
        - crypto
      operationId: transfer
      description: Transfer money
      summary: Transfer money
      parameters:
        - name: sender_address
          in: query
          description: The sender address
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: receiver_address
          in: query
          description: The receiver address
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: amount
          in: query
          description: The amount to transfer
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: currency
          in: query
          description: The currency type
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '405':
          description: Invalid input
        '400':
          description: Invalid sender/receiver supplied
  /user:
    post:
      tags:
        - user
      operationId: createUser
      description: Create a new User
      summary: Create a new User
      requestBody:
        required: true
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    put:
      tags:
        - user
      operationId: updateUser
      description: Update an existent User by ID
      summary: Update an existent User
      requestBody:
        required: true
        description: Update an existent User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
  /user/{userId}:
    get:
      tags:
        - user
      operationId: retrieveUser
      description: Retrieve an existent User by ID
      summary: Retrieve a User
      parameters:
        - name: userId
          in: path
          description: Id of the User to return
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      operationId: deleteUser
      description: Delete an existent User by ID
      summary: Delete a User
      parameters:
        - name: userId
          in: path
          description: Id of the User to delete
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  /user/login:
    get:
      tags:
        - user
      operationId: loginUser
      description: Logs the User into the system
      summary: Login for User
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      operationId: logoutUser
      description: Logs out current logged in User session
      summary: Logout for User
      responses:
        '200':
          description: Successful operation
  /user/admin:
    get:
      tags:
        - user
      operationId: loginAdmin
      description: Logs the User into the admin page
      summary: Login for admin
      parameters:
        - name: username
          in: query
          description: The username for admin
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for admin in clear text
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /workstation:
    post:
      tags:
        - workstation
      operationId: createWorkstation
      description: Create a new Workstation
      summary: Create a new Workstation
      requestBody:
        required: true
        description: Create a new Workstation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        '405':
          description: Invalid input
    put:
      tags:
        - workstation
      operationId: updateWorkstation
      description: Update an existent Workstation by ID
      summary: Update an existent Workstation
      requestBody:
        required: true
        description: Update an existent Workstation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Workstation not found
        '405':
          description: Validation exception
  /workstation/{workstationId}:
    get:
      tags:
        - workstation
      operationId: retrieveWorkstation
      description: Retrieve an existent Workstation by ID
      summary: Retrieve a Workstation
      parameters:
        - name: workstationId
          in: path
          description: Id of the Workstation to return
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Workstation not found
    delete:
      tags:
        - workstation
      operationId: deleteWorkstation
      description: Delete an existent Workstation by ID
      summary: Delete a Workstation
      parameters:
        - name: workstationId
          in: path
          description: Id of the Workstation to delete
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  /workstation/accessWorkstation:
    get:
      tags:
        - workstation
      operationId: accessWorkstation
      description: Access into workstation shell
      summary: Access into workstation shell
      parameters:
        - name: workstation
          in: query
          description: The workstation id
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid id/password supplied
components:
  schemas:
    Workstation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id autoincrementale
          example: 10
        workstation:
          type: string
          example: 471-06-4256
        employee:
          type: string
          example: rbraggintonir@newyorker.com
        rootpwd:
          type: string
          example: 1b4711e449f31792ad329b738ca8442d8eeb4f642ef66ef89b7e6cac00cfc36d
    Crypto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id autoincrementale
          example: 10
        sender_address:
          type: string
          example: 0x5bdb2c79109e0d998ad907955e9609fd189e17d9
        receiver_address:
          type: string
          example: 0x70d60530688b254b4a6c4dc1cac06631a328408f
        amount:
          type: string
          example: 447498.8
        currency:
          type: string
          example: CAD
        transaction_date:
          type: string
          example: 7/29/2022
        transaction_type:
          type: string
          example: sell
        transaction_status:
          type: string
          example: pending
        transaction_fee:
          type: string
          example: 95.39
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id autoincrementale
          example: 10
        first_name:
          type: string
          example: Barret
        last_name:
          type: string
          example: Clere
        email:
          type: string
          example: bclered9@ask.com
        username:
          type: string
          example: bclered9
        password:
          type: string
          example: $2a$04$7gKNwALhhhdAVcEBHYskI.EJkcGRFLdeMWCq51WU4CoxDwMQmlTU6
        gender:
          type: string
          example: Male
        ipaddress:
          type: string
          example: 143.182.83.110
        address_id:
          type: string
          example: 478
        phone_number:
          type: string
          example: +86 (973) 677-1142
        job_title:
          type: string
          example: Associate Professor
        department:
          type: string
          example: Accounting
        company_id:
          type: string
          example: Edgetag
        is_active:
          type: string
          example: true
