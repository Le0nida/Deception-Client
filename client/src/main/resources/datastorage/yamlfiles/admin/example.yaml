openapi: 3.0.0
info:
  title: My Awesome API
  description: This API provides functionalities for...
  termsOfService: https://example.com/terms
  version: 1.0.0
  contact:
    email: john.doe@example.com
    name: John Doe
    url: https://example.com/
  license:
    identifier: Apache-2.0
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
externalDocs:
  description: Documentation for APIs
  url: https://example.com/docs
servers:
  - url: https://api.example.com
    description: Main server for production environment
tags:
  - name: user
    description: User management
paths:
  /user:
    post:
      tags:
        - user
      operationId: createUser
      description: Create a new User
      summary: Create a new User
      requestBody:
        required: true
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    put:
      tags:
        - user
      operationId: updateUser
      description: Update an existent User by ID
      summary: Update an existent User
      requestBody:
        required: true
        description: Update an existent User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
  /user/{userId}:
    get:
      tags:
        - user
      operationId: retrieveUser
      description: Retrieve an existent User by ID
      summary: Retrieve a User
      parameters:
        - name: userId
          in: path
          description: Id of the User to return
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      operationId: deleteUser
      description: Delete an existent User by ID
      summary: Delete a User
      parameters:
        - name: userId
          in: path
          description: Id of the User to delete
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  /user/login:
    get:
      tags:
        - user
      operationId: loginUser
      description: Logs the User into the system
      summary: Login for User
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      operationId: logoutUser
      description: Logs out current logged in User session
      summary: Logout for User
      responses:
        '200':
          description: Successful operation
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id autoincrementale
          example: 10
        first_name:
          type: string
          example: Leigha
        last_name:
          type: string
          example: Lavens
        email:
          type: string
          example: llavens0@hexun.com
        username:
          type: string
          example: llavens0
        password:
          type: string
          example: $2a$04$E2rcxA.0yR.F5UgOZiwFp.1xSnWpXCFFe83JTauj.68CftdM657oa
        gender:
          type: string
          example: Female
        ipaddress:
          type: string
          example: 254.200.155.43
        address:
          type: string
          example: {street=2933 Farragut Place, city=Lembongan Kawan, state=null, zipcode=null}
        phone_number:
          type: string
          example: +62 (643) 733-0126
        job_title:
          type: string
          example: Software Consultant
        department:
          type: string
          example: Sales
        company:
          type: string
          example: {name=Ntag, industry=Real Estate Investment Trusts}
        isActive:
          type: string
          example: true
  securitySchemes:
    :
      type: oauth2
      description: Oauth2 security schema
      name: 
      in: 
      scheme: 
      bearerFormat: 
      openIdConnectUrl: 
      flows: 
        authorizationCode: 
          authorizationUrl: https://example.com/
          tokenUrl: https://example.com/
          refreshUrl: https://example.com/
          scopes: 
            read: ok
            write: ko
        implicit: 
          authorizationUrl: https://example.com/
          refreshUrl: https://example.com/
          scopes: 
            read: ok
            write: ko
        password: 
          tokenUrl: https://example.com/
          refreshUrl: https://example.com/
          scopes: 
            read: ok
            write: ko
        clientCredentials: 
          tokenUrl: https://example.com/
          refreshUrl: https://example.com/
          scopes: 
            read: ok
            write: ko
